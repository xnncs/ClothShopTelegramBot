// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShopTelegramBot.Database;

#nullable disable

namespace ShopTelegramBot.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShopTelegramBot.Models.ShoppingCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCategories");
                });

            modelBuilder.Entity("ShopTelegramBot.Models.ShoppingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<List<string>>("PhotoFileNames")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ShoppingCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCategoryId");

                    b.ToTable("ShoppingItems");
                });

            modelBuilder.Entity("ShopTelegramBot.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("510cf288-78b3-4591-9abe-aef60f0e7ab8"),
                            Age = 18,
                            IsAdmin = true,
                            TelegramId = 1367636999L,
                            Username = "zitiret"
                        });
                });

            modelBuilder.Entity("ShopTelegramBot.Models.ShoppingItem", b =>
                {
                    b.HasOne("ShopTelegramBot.Models.ShoppingCategory", "ShoppingCategory")
                        .WithMany("ShoppingItems")
                        .HasForeignKey("ShoppingCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ShoppingCategory");
                });

            modelBuilder.Entity("ShopTelegramBot.Models.ShoppingCategory", b =>
                {
                    b.Navigation("ShoppingItems");
                });
#pragma warning restore 612, 618
        }
    }
}
